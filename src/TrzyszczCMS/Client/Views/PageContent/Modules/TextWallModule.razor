@using System.ComponentModel
@using TrzyszczCMS.Client.ViewModels.PageContent.Modules
@using TrzyszczCMS.Client.Data.Enums.Extensions

<div class="w-100 d-block pb-3 mt-4">
    <aside class="@ViewModel.ModuleContent.SectionWidth.SectionWidthCssClass() px-2">
        @if (string.IsNullOrEmpty(ViewModel.ModuleContent.LeftAsideMarkDownContent))
        {
            <span class="user-select-none" aria-hidden="true">&nbsp;</span>
        }
        else
        {
            <div class="aside-inner-note aside-inner-note-left">
                <MarkDown Text="@ViewModel.ModuleContent.LeftAsideMarkDownContent" />
            </div>
        }
    </aside>
    <section class="@ViewModel.ModuleContent.SectionWidth.SectionWidthCssClass() px-2 mb-0">
        <MarkDown Text="@ViewModel.ModuleContent.SectionMarkDownContent" />
    </section>
    <aside class="@ViewModel.ModuleContent.SectionWidth.SectionWidthCssClass() px-2">
        @if (string.IsNullOrEmpty(ViewModel.ModuleContent.RightAsideMarkDownContent))
        {
            <span class="user-select-none" aria-hidden="true">&nbsp;</span>
        }
        else
        {
            <div class="aside-inner-note aside-inner-note-right">
                <MarkDown Text="@ViewModel.ModuleContent.RightAsideMarkDownContent" />
            </div>
        }
    </aside>
    <div aria-hidden="true" style="clear: both"></div>
</div>

@code {

    [Parameter]
    public TextWallModuleViewModel ViewModel { get; set; }

    protected override void OnInitialized()
    {
        this.ViewModel.PropertyChanged += new PropertyChangedEventHandler(
            async (s, e) => await this.InvokeAsync(() => this.StateHasChanged())
        );

        base.OnInitialized();
    }
}
