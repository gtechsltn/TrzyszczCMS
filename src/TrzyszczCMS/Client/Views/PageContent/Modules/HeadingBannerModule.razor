@using System.ComponentModel
@using Core.Shared.Enums
@using Core.Shared.Helpers.Extensions
@using TrzyszczCMS.Client.ViewModels.PageContent.Modules
@using TrzyszczCMS.Client.Helpers
@inject NavigationManager NavigationManager


<div class="w-100 pb-3 mb-4 px-4 position-relative background-resized background-parallax" style="@ViewModel.BannerCssStyle">

    @if (ViewModel.ModuleContent.AttachLinkMenu && ViewModel.ModuleContent.MenuItems != null && ViewModel.ModuleContent.MenuItems.Count != 0)
    {
        <div class="position-absolute d-flex flex-wrap" style="top: 1.5vh; left: 10vw; opacity: 0.9; width: 80vw; background-color: #f9fafb;">

            @foreach (var menuItem in ViewModel.ModuleContent.MenuItems)
            {
                @if (menuItem.SubItems != null && menuItem.SubItems.Count != 0 && DisplaySelects)
                {
                    <select class="form-select menu-item-control menu-item-control-light" style="@CssStyleHelper.CssMenuItemWidth(menuItem.Name)" aria-label="@menuItem.Name">
                        <option disabled selected>@menuItem.Name</option>
                        @foreach (var subItem in menuItem.SubItems)
                        {
                            <option @onclick="@(() => FollowLinkAsync(subItem.Uri, true))">@subItem.Name</option>
                        }
                    </select>
                }
                else
                {
                    <NavLink class="btn btn-light menu-item-control" href="@menuItem.Uri"
                             style="@CssStyleHelper.CssMenuItemWidth(menuItem.Name)">@menuItem.Name
                    </NavLink>
                }
            }
        </div>
    }

    <div class="position-absolute" style="bottom: 10vh; left: 10vw; text-shadow: 1px 1px 2px @ViewModel.ShadowColor;">
        <h1>@ViewModel.ModuleContent.Title</h1>
        <div>@DateAndAuthorInfo</div>
        @if (@ViewModel.ModuleContent.DisplayDescription && !string.IsNullOrEmpty(@ViewModel.ModuleContent.Description))
        {
            <div>@ViewModel.ModuleContent.Description</div>
        }
    </div>
</div>


@code {

    [Parameter]
    public HeadingBannerModuleViewModel ViewModel { get; set; }

    [Parameter]
    public PageType PageType { get; set; }

    private bool DisplaySelects;

    private string DateAndAuthorInfo
    {
        get
        {
            var isPost = this.PageType == PageType.Post;
            var hasAuthors = ViewModel.ModuleContent.DisplayAuthorsInfo && !string.IsNullOrEmpty(ViewModel.ModuleContent.AuthorsInfo);

            var text = new System.Text.StringBuilder();
            if (isPost)               { text.Append(ViewModel.ModuleContent.PublishUtcTimestamp.ToGenericNotation()); }
            if (isPost && hasAuthors) { text.Append(", "); }
            if (hasAuthors)           { text.Append("Authors: ").Append(ViewModel.ModuleContent.AuthorsInfo); }
            return text.ToString();
        }
    }

    protected override void OnInitialized()
    {
        this.ViewModel.PropertyChanged += new PropertyChangedEventHandler(
            async (s, e) => await this.InvokeAsync(() => this.StateHasChanged())
        );
        this.DisplaySelects = true;
        base.OnInitialized();
    }

    private async Task FollowLinkAsync(string uri, bool subitem)
    {
        if (subitem)
        {
            await this.InvokeAsync(() => this.DisplaySelects = false);
            await Task.Delay(1);
            await this.InvokeAsync(() => this.DisplaySelects = true);
        }
        NavigationManager.NavigateTo(uri, true);
    }
}
