@using System.ComponentModel;
@using TrzyszczCMS.Client.Views.PageContent
@using Core.Shared.Enums
@using TrzyszczCMS.Client.ViewModels.PageContent
@using TrzyszczCMS.Client.ViewModels.PageContent.Modules
@using TrzyszczCMS.Client.Views.PageContent.Modules
@using Utilities.Extensions

@inject ModularPageViewModel ViewModel
@*--- This an empty layout for most of the website pages visible for any user ---*@

@if (ViewModel.ContentFound == false)
{
    <ErrorPage />
}
else if (ViewModel.ContentFound == true)
{
    <header class="px-4">
        @if (PageType == PageType.HomePage)
        {
            <h1>Home page</h1>
        }
        else if (PageType == PageType.Article)
        {
            <h1>Article</h1>
        }
        else if (PageType == PageType.Post)
        {
            <h1>Post</h1>
        }
    </header>

    @foreach (var moduleVM in ViewModel.ViewModelsForModules)
    {
        if (moduleVM.As(out TextWallModuleViewModel textWallVM))
        {
            <TextWallModule ViewModel="@textWallVM" />
        }
        else
        {
            <section><strong>Error:</strong> There is a content type (@moduleVM.GetType().Name) that cannot be displayed.</section>
        }
    }

    <CommonFooter />
}
else
{
    <CenterSpinner />
}


@code {

    [Parameter]
    public string PageName { get; set; }

    [Parameter]
    public PageType PageType { get; set; }

    protected override async Task OnInitializedAsync()
    {
        this.ViewModel.PropertyChanged += new PropertyChangedEventHandler(
            async (s, e) => await this.InvokeAsync(() => this.StateHasChanged())
        );
        await this.ViewModel.PrepareModules(this.PageType, this.PageName);

        await base.OnInitializedAsync();
    }

}
