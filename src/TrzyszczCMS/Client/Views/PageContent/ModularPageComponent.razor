@using System.ComponentModel;
@using TrzyszczCMS.Client.Views.PageContent
@using Core.Shared.Enums
@using TrzyszczCMS.Client.ViewModels.PageContent
@using TrzyszczCMS.Client.ViewModels.PageContent.Modules
@using TrzyszczCMS.Client.Views.PageContent.Modules
@using Core.Shared.Helpers.Extensions

@inject ModularPageViewModel ViewModel
@*--- This is an empty layout for most of the website pages visible for any user ---*@

@if (ViewModel.ContentFound == false)
{
    <ErrorPage />
}
else if (ViewModel.ContentFound == true)
{
    @foreach (var moduleVM in ViewModel.ViewModelsForModules)
    {
        if (moduleVM is TextWallModuleViewModel textWallVM)
        {
            <TextWallModule ViewModel="@textWallVM" />
        }
        else if (moduleVM is HeadingBannerModuleViewModel headingBannerVM)
        {
            <HeadingBannerModule ViewModel="@headingBannerVM" />
        }
        else
        {
            <section><strong>Error:</strong> There is a content type <em>(@moduleVM.GetType().Name)</em> that cannot be displayed.</section>
        }
    }

    <CommonFooter />
}
else
{
    <CenterSpinner />
}


@code {

    [Parameter]
    public string PageName { get; set; }

    [Parameter]
    public PageType PageType { get; set; }

    protected override async Task OnInitializedAsync()
    {
        this.ViewModel.PropertyChanged += new PropertyChangedEventHandler(
            async (s, e) => await this.InvokeAsync(() => this.StateHasChanged())
        );
        await this.ViewModel.PrepareModules(this.PageType, this.PageName);

        await base.OnInitializedAsync();
    }

}
