@layout AdminLayout
@page "/manage/edit-page"

@using Core.Application.Enums
@using Core.Shared.Enums
@using DAL.Shared.Data 
@using TrzyszczCMS.Client.Data.Enums.Extensions
@using TrzyszczCMS.Client.Views.Shared.Editors
@using TrzyszczCMS.Client.Views.Shared.Grids
@using TrzyszczCMS.Client.Views.Shared
@using TrzyszczCMS.Client.ViewModels.Administering.Edit
@inject PageEditorViewModel ViewModel
@inject NavigationManager NavigationManager


@if (this.ViewModel.IsManagingPossible)
{
    @switch (this.ViewModel.EditedPageDepositVM.CurrentManagementTool)
    {
        case PageManagementTool.PageLayoutComposer:
            <EditForm Model="@ViewModel" OnValidSubmit="@ViewModel.ApplyChanges">
                <nav class="d-flex">
                    <h1 class="me-auto">@(this.ViewModel.EditedPageDepositVM.PageEditorMode == DataEditorMode.Create ? "Creating" : "Editing") page</h1>
                    <div class="d-flex mt-auto mb-1">
                        <div class="input-group input-group-sm">
                            <span class="input-group-text"><i class="fas fa-plus"></i></span>
                            <select class="form-select form-select-sm" aria-label="Add module">
                                <option disabled selected>Add module</option>
                                @foreach (var sgType in Enum.GetValues(typeof(PageModuleType)).Cast<PageModuleType>().OrderBy(i => i.GetTranslation()))
                                {
                                    <option value="@sgType" @onclick="@(() => ViewModel.AddModule(sgType))">@sgType.GetTranslation()</option>
                                }
                            </select>
                            <button type="submit" class="btn btn-sm btn-primary"><i class="fas fa-save"></i>&nbsp;Apply changes</button>
                        </div>
                    </div>
                </nav>
                <section>
                    <Grid Items="ViewModel.EditedPageDepositVM.ModuleContents" MultiSelect="false">
                        <Header>
                            <GridColHeader SearchBoxType="SearchBoxType.None" Title="Module type" />
                            <GridColHeader SearchBoxType="SearchBoxType.None" Title="Actions" Width="310" />
                        </Header>
                        <RowTemplate Context="row">
                            <td>@row.Data.GetModuleType().GetTranslation()</td>
                            <td>
                                <div class="input-group input-group-sm justify-content-end">
                                    @if (row.Data.GetModuleType() == PageModuleType.TextWall)
                                    {
                                        <span class="input-group-text"><i class="fas fa-edit"></i></span>
                                        <select class="form-select form-select-sm" aria-label="Edit">
                                            <option disabled selected>Edit</option>
                                            @foreach (var sgType in Enum.GetValues(typeof(TextWallEditedPart)).Cast<TextWallEditedPart>())
                                            {
                                                <option value="@sgType" @onclick="@(() => ViewModel.EditModule(row, sgType))">@sgType.GetTranslation()</option>
                                            }
                                        </select>
                                    }
                                    else
                                    {
                                        <button class="btn btn-sm btn-primary" @onclick="@(() => ViewModel.EditModule(row))"><i class="fas fa-edit"></i>&nbsp;Edit</button>
                                    }
                                    <button type="button" class="btn btn-sm btn-primary" @onclick="@(() => ViewModel.RemoveModule(row))"><i class="fas fa-minus"></i>&nbsp;Remove</button>
                                    <button type="button" class="btn btn-sm btn-primary" @onclick="@(() => ViewModel.MoveModuleItem(row, true))"><i class="fas fa-arrow-up"></i></button>
                                    <button type="button" class="btn btn-sm btn-primary" @onclick="@(() => ViewModel.MoveModuleItem(row, false))"><i class="fas fa-arrow-down"></i></button>
                                </div>
                            </td>
                        </RowTemplate>
                        <NoRowsTemplate>
                            There are not any modules for this page.
                        </NoRowsTemplate>
                    </Grid>
                </section>

                <h2 class="mt-3">Properties</h2>
                <section>
                    <div class="container-fluid">
                        <div class="row row-cols-1 row-cols-lg-2">
                            <div class="col">
                                <ErrorMessageBlock Message="@ViewModel.EditedPageDepositVM.TitleValidationMessage" />
                                <div class="d-flex my-3">
                                    <div class="form-floating" style="@CopyTitleCssStyle">
                                        <input type="text" id="titleName" class="form-control w-100" @bind="@ViewModel.EditedPageDepositVM.Title" maxlength="@Constraints.ContPage.TITLE" />
                                        <label for="titleName">Title</label>
                                    </div>
                                    @if (ViewModel.EditedPageDepositVM.PageType != PageType.HomePage)
                                    {
                                        <button type="button" class="btn btn-light ms-auto" style="width: 44px;" title="Create URI name from title"
                                                @onclick="@ViewModel.CreateUriNameFromTitle">
                                            <i class="fas fa-copy"></i>
                                        </button>
                                    }
                                </div>
                            </div>
                            @if (ViewModel.EditedPageDepositVM.PageType != PageType.HomePage)
                            {
                                <div class="col">
                                    <ErrorMessageBlock Message="@ViewModel.EditedPageDepositVM.UriNameValidationMessage" />
                                    <div class="form-floating my-3">
                                        <input type="text" id="uriName" class="form-control w-100" @bind="@ViewModel.EditedPageDepositVM.UriName" maxlength="@Constraints.ContPage.URI_NAME" />
                                        <label for="uriName">URI name</label>
                                    </div>
                                </div>

                                <div class="col">
                                    <ErrorMessageBlock Message="@ViewModel.EditedPageDepositVM.PublishUtcTimestampDateValidationMessage" />
                                    <div class="form-floating my-3">
                                        <input type="date" id="publishDate" class="form-control w-100" @bind="@ViewModel.EditedPageDepositVM.PublishUtcTimestampDate" />
                                        <label for="publishDate">Publish date</label>
                                    </div>
                                </div>
                                <div class="col">
                                    <ErrorMessageBlock Message="@ViewModel.EditedPageDepositVM.PublishUtcTimestampTimeValidationMessage" />
                                    <div class="form-floating my-3">
                                        <input type="time" id="publishTime" class="form-control w-100" @bind="@ViewModel.EditedPageDepositVM.PublishUtcTimestampTime" />
                                        <label for="publishTime">Publish hour</label>
                                    </div>
                                </div>
                            }
                            <div class="col">
                                <div class="form-floating my-3">
                                    <input type="text" id="authorsInfo" class="form-control w-100" @bind="@ViewModel.EditedPageDepositVM.AuthorsInfo" maxlength="@Constraints.ContPage.AUTHORS_INFO" />
                                    <label for="authorsInfo">Authors info</label>
                                </div>
                            </div>
                            <div class="col">
                                <div class="form-floating my-3">
                                    <input type="text" id="description" class="form-control w-100" @bind="@ViewModel.EditedPageDepositVM.Description" maxlength="@Constraints.ContPage.DESCRIPTION" />
                                    <label for="description">Description</label>
                                </div>
                            </div>
                        </div>
                    </div>
                </section>
            </EditForm>
            break;

        case PageManagementTool.TextWallSectionEditor:
        case PageManagementTool.TextWallLeftAsideEditor:
        case PageManagementTool.TextWallRightAsideEditor:
            <MarkDownEditor MarkDownCode="@ViewModel.CurrentlyEditedMarkDownCode"
                            ShowSizingSelect="@(this.ViewModel.EditedPageDepositVM.CurrentManagementTool == PageManagementTool.TextWallSectionEditor)"
                            OnEditorExiting="@ViewModel.OnEditorExiting"
                            OnMarkDownChanged="@ViewModel.OnMarkDownCodeChanged"
                            OnMaxPreviewedPageWidthChanged="@ViewModel.OnMaxPreviewedPageWidthChanged"
                            MaxPreviewedPageWidth="@ViewModel.CurrentlyEditedSectionWidth" />
            break;

        case PageManagementTool.HeadingBannerEditor:
            <nav class="d-flex">
                <h2 class="me-auto">Heading banner preferences</h2>
                <div class="d-flex mt-auto mb-1 ms-auto">
                    <button class="btn btn-light" @onclick="@ViewModel.CurrentlyEditedHeadingBannerVM.ValidateAndExitAsync"><i class="fas fa-door-open" aria-label="Exit editor"></i></button>
                </div>
            </nav>
            <section>
                <div class="container-fluid">
                    <div class="row row-cols-1 row-cols-lg-2">
                        <div class="col">
                            <div class="d-flex my-3">
                                <label>
                                    <input type="checkbox" class="form-check-input" @bind="@ViewModel.CurrentlyEditedHeadingBannerVM.DisplayAuthorsInfo" />&nbsp;Display authors info
                                </label>
                            </div>
                        </div>
                        <div class="col">
                            <div class="d-flex my-3">
                                <label>
                                    <input type="checkbox" class="form-check-input" @bind="@ViewModel.CurrentlyEditedHeadingBannerVM.DisplayDescription" />&nbsp;Display description
                                </label>
                            </div>
                        </div>

                        <div class="col">
                            <div class="d-flex my-3">
                                <label>
                                    <input type="checkbox" class="form-check-input" @bind="@ViewModel.CurrentlyEditedHeadingBannerVM.DarkDescription" />&nbsp;Description text is dark
                                </label>
                            </div>
                        </div>
                        <div class="col">
                            <div class="d-flex my-3">
                                <label>
                                    <input type="checkbox" class="form-check-input" @bind="@ViewModel.CurrentlyEditedHeadingBannerVM.AttachLinkMenu" />&nbsp;Display top navigation menu
                                </label>
                            </div>
                        </div>


                        <div class="col">
                            <div class="form-floating my-3">
                                <select class="form-select form-select-sm" aria-label="Select banner height" @bind="@ViewModel.CurrentlyEditedHeadingBannerVM.ViewportHeight">
                                    @foreach (var sgType in Enum.GetValues(typeof(HeadingBannerHeight)).Cast<HeadingBannerHeight>().OrderBy(i => i))
                                    {
                                        <option value="@sgType">@sgType.GetPercentageDescription()</option>
                                    }
                                </select>
                                <label for="uriName">Banner height</label>
                            </div>
                        </div>
                        <div class="col">
                            <ErrorMessageBlock Message="@ViewModel.CurrentlyEditedHeadingBannerVM.BackgroundPictureAccessGuidValidationMessage" />
                            <div class="form-floating my-3">
                                <input type="text" id="backgroundPictureGuid" class="form-control w-100" @bind="@ViewModel.CurrentlyEditedHeadingBannerVM.BackgroundPictureAccessGuid" />
                                <label for="backgroundPictureGuid">Access ID of the background picture</label>
                            </div>
                        </div>
                    </div>
                </div>
            </section>
            break;

        case PageManagementTool.PostListingEditor:
            <nav class="d-flex">
                <h2 class="me-auto">Post listing preferences</h2>
                <div class="d-flex mt-auto mb-1 ms-auto">
                    <button class="btn btn-light" @onclick="@ViewModel.CurrentlyEditedPostListingVM.Exit"><i class="fas fa-door-open" aria-label="Exit editor"></i></button>
                </div>
            </nav>
            <section>
                <div class="container-fluid">
                    <div class="row row-cols-1 row-cols-lg-2">
                        <div class="col">
                            <div class="form-floating my-3">
                                <select class="form-select form-select-sm" aria-label="Select banner height" @bind="@ViewModel.CurrentlyEditedPostListingVM.PostListingWidth">
                                    @foreach (var sgType in Enum.GetValues(typeof(PostListingWidth)).Cast<PostListingWidth>().OrderBy(i => i))
                                    {
                                        <option value="@sgType">@sgType.GetWidthDescriptionAboutPixels()</option>
                                    }
                                </select>
                                <label for="uriName">Listing width</label>
                            </div>
                        </div>
                    </div>
                </div>
            </section>
            break;

        default:
            <span>There should be an another management tool.</span>
            break;
    }

}
else
{
    <span>If you want to create or edit a page, select one.</span>
}
